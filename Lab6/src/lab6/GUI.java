package lab6;

import ds.*;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class GUI extends javax.swing.JFrame {

    Schema mySchema                = null;
    Element selected, elementToAdd = null;
    int cor_x, cor_y, seconds;
    String typeOfElementToAdd      = "";
    PaintingThread paintingThread  = null;
    MovingThread movingThread      = null;
    int maxInputs                  = 0;
    Element maxInputsElement       = null;

    public GUI() {
        initComponents();
        drawing1.grabFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        drawing1 = new lab6.Drawing();
        jToolBarInputs = new javax.swing.JToolBar();
        jButtonInput = new javax.swing.JButton();
        jButtonNot = new javax.swing.JButton();
        jButtonAnd = new javax.swing.JButton();
        jButtonOr = new javax.swing.JButton();
        jButtonXor = new javax.swing.JButton();
        jToolBarControl = new javax.swing.JToolBar();
        jSlider = new javax.swing.JSlider();
        jButtonPlay = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();
        jButtonNextStep = new javax.swing.JButton();
        jButtonMove = new javax.swing.JButton();
        jButtonDontMove = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemNew = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemRead = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jCheckBoxMenuItemShowOutput = new javax.swing.JCheckBoxMenuItem();
        jMenuItemColor = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        drawing1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                drawing1MouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawing1MouseDragged(evt);
            }
        });
        drawing1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                drawing1MouseWheelMoved(evt);
            }
        });
        drawing1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawing1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawing1MouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawing1MouseClicked(evt);
            }
        });
        drawing1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                drawing1KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout drawing1Layout = new javax.swing.GroupLayout(drawing1);
        drawing1.setLayout(drawing1Layout);
        drawing1Layout.setHorizontalGroup(
            drawing1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        drawing1Layout.setVerticalGroup(
            drawing1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 416, Short.MAX_VALUE)
        );

        jToolBarInputs.setRollover(true);

        jButtonInput.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jButtonInput.setText("Input");
        jButtonInput.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonInput.setFocusable(false);
        jButtonInput.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonInput.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonInputMouseClicked(evt);
            }
        });
        jToolBarInputs.add(jButtonInput);

        jButtonNot.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jButtonNot.setText("NOT");
        jButtonNot.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonNot.setFocusable(false);
        jButtonNot.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNot.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNotMouseClicked(evt);
            }
        });
        jToolBarInputs.add(jButtonNot);

        jButtonAnd.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jButtonAnd.setText("AND");
        jButtonAnd.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonAnd.setFocusable(false);
        jButtonAnd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAnd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAnd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAndMouseClicked(evt);
            }
        });
        jToolBarInputs.add(jButtonAnd);
        jButtonAnd.getAccessibleContext().setAccessibleName("");

        jButtonOr.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jButtonOr.setText("OR");
        jButtonOr.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonOr.setFocusable(false);
        jButtonOr.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonOr.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonOr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOrMouseClicked(evt);
            }
        });
        jToolBarInputs.add(jButtonOr);

        jButtonXor.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jButtonXor.setText("XOR");
        jButtonXor.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonXor.setFocusable(false);
        jButtonXor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonXor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonXor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonXorMouseClicked(evt);
            }
        });
        jToolBarInputs.add(jButtonXor);

        jToolBarControl.setRollover(true);
        jToolBarControl.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jSlider.setMaximum(5);
        jSlider.setValue(0);
        jSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderStateChanged(evt);
            }
        });
        jToolBarControl.add(jSlider);

        jButtonPlay.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonPlay.setEnabled(false);
        jButtonPlay.setFocusable(false);
        jButtonPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPlay.setLabel("Play");
        jButtonPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayActionPerformed(evt);
            }
        });
        jToolBarControl.add(jButtonPlay);

        jButtonStop.setText("Stop");
        jButtonStop.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonStop.setEnabled(false);
        jButtonStop.setFocusable(false);
        jButtonStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });
        jToolBarControl.add(jButtonStop);
        jButtonStop.getAccessibleContext().setAccessibleName("JButton2");

        jButtonNextStep.setText("Next step");
        jButtonNextStep.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonNextStep.setFocusable(false);
        jButtonNextStep.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNextStep.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNextStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextStepActionPerformed(evt);
            }
        });
        jToolBarControl.add(jButtonNextStep);

        jButtonMove.setText("Move!");
        jButtonMove.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonMove.setFocusable(false);
        jButtonMove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonMove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveActionPerformed(evt);
            }
        });
        jToolBarControl.add(jButtonMove);

        jButtonDontMove.setText("Don't move!");
        jButtonDontMove.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDontMove.setFocusable(false);
        jButtonDontMove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonDontMove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonDontMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDontMoveActionPerformed(evt);
            }
        });
        jToolBarControl.add(jButtonDontMove);

        jMenuFile.setText("File");

        jMenuItemNew.setText("Create a new Schema");
        jMenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemNew);

        jMenuItemSave.setText("Save file");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSave);

        jMenuItemRead.setText("Read from file");
        jMenuItemRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReadActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemRead);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar.add(jMenuFile);

        jMenuEdit.setText("Edit");

        jCheckBoxMenuItemShowOutput.setText("Show output");
        jCheckBoxMenuItemShowOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemShowOutputActionPerformed(evt);
            }
        });
        jMenuEdit.add(jCheckBoxMenuItemShowOutput);

        jMenuItemColor.setText("Color");
        jMenuItemColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemColorMouseClicked(evt);
            }
        });
        jMenuItemColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemColorActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemColor);

        jMenuBar.add(jMenuEdit);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBarInputs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(drawing1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jToolBarControl, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBarInputs, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBarControl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawing1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void drawing1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawing1MousePressed
        selected = getElementByCoordinates(evt.getX(), evt.getY());
        if (selected != null) {
            cor_x = evt.getX() - selected.getX();
            cor_y = evt.getY() - selected.getY();
        }
        drawing1.selected = selected;
        drawing1.repaint();
    }//GEN-LAST:event_drawing1MousePressed

    private void drawing1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawing1MouseReleased
        if (!typeOfElementToAdd.equals("")) {
            switch (typeOfElementToAdd) {
                case "Input":
                    mySchema.addInput();
                    break;
                case "Not":
                    mySchema.addNOT();
                    break;
                case "Or":
                    mySchema.addOR();
                    break;
                case "And":
                    mySchema.addAND();
                    break;
                case "Xor":
                    mySchema.addXOR();
                    break;
            }
            int index = mySchema.getListOfElements().size();
            Element added = mySchema.getListOfElements().get(index - 1);
            added.setX(evt.getX());
            added.setY(evt.getY());
            drawing1.repaint();
        } else 
            if (evt.isControlDown() || evt.isShiftDown()) {
                Element second = getElementByCoordinates(evt.getX(), evt.getY());
                if (selected != null && second != null) {
                    if (evt.isControlDown()) {
                        mySchema.connectElements(selected.getId(), second.getId());
                    } else {
                        mySchema.deleteConnection(selected.getId(), second.getId());
                    }
                    drawing1.repaint();
                }
            }
    }//GEN-LAST:event_drawing1MouseReleased

    private void drawing1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawing1MouseMoved
        if (elementToAdd != null) {
            elementToAdd.setX(evt.getX());
            elementToAdd.setY(evt.getY());
            drawing1.repaint();
        }
    }//GEN-LAST:event_drawing1MouseMoved

    private void drawing1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawing1MouseClicked
        if (elementToAdd != null) {
            mySchema.getListOfElements().add(elementToAdd);
            elementToAdd = null;
            drawing1.separate = null;
            drawing1.repaint();
        } else {
            selected = getElementByCoordinates(evt.getX(), evt.getY());
            if (evt.getClickCount() > 1 && selected != null)
                if (selected.getClass().equals(Input.class)) 
                    mySchema.setResult(selected.getId(), !selected.getOutput());
            
            drawing1.selected = selected;
            drawing1.repaint();
        }
    }//GEN-LAST:event_drawing1MouseClicked

    private void drawing1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_drawing1KeyReleased
        //delete
        if (evt.getKeyCode() == 127) {
            mySchema.deleteElement(selected.getId());
            drawing1.repaint();
        }
    }//GEN-LAST:event_drawing1KeyReleased

    private void jCheckBoxMenuItemShowOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemShowOutputActionPerformed
        drawing1.toShowOutput = jCheckBoxMenuItemShowOutput.isSelected();
        drawing1.repaint();
    }//GEN-LAST:event_jCheckBoxMenuItemShowOutputActionPerformed

    private void jMenuItemColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemColorActionPerformed
        ColorSelector cs = new ColorSelector(this, true);
        cs.setBackground(drawing1.getBackground());
        cs.setBorder(drawing1.color);
        cs.setVisible(true);
        if (cs.selected) {
            Color background = cs.background;
            Color border = cs.border;
            drawing1.setBackground(background);
            drawing1.color = border;
            drawing1.repaint();
        }
    }//GEN-LAST:event_jMenuItemColorActionPerformed

    private void jMenuItemReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReadActionPerformed
        //Read from a file
        JFileChooser fch = new JFileChooser();
        int retrival = fch.showSaveDialog(null);
        if (retrival == JFileChooser.APPROVE_OPTION){
            try {
                File file = fch.getSelectedFile();
                FileInputStream ostream = new FileInputStream(file.getAbsolutePath());
                ObjectInputStream p = new ObjectInputStream(ostream);
                mySchema = (Schema)p.readObject();
                drawing1.forDrawing = mySchema;
                p.close();
                ostream.close();
                drawing1.repaint();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jMenuItemReadActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        JFileChooser fch = new JFileChooser();
        int retrival = fch.showSaveDialog(null);
        if (retrival == JFileChooser.APPROVE_OPTION){
            try {
                File file = fch.getSelectedFile();
                FileOutputStream ostream = new FileOutputStream(file.getAbsolutePath());
                ObjectOutputStream p = new ObjectOutputStream(ostream);
                p.writeObject(mySchema);
                p.close();
                ostream.close();
            } catch (Exception e) {
            e.printStackTrace();
            }            
        }
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void drawing1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawing1MouseDragged
        if (selected != null && !evt.isControlDown() && !evt.isShiftDown()) {
            selected.setX(evt.getX() - cor_x);
            selected.setY(evt.getY() - cor_y);
            drawing1.repaint();
        }
    }//GEN-LAST:event_drawing1MouseDragged

    private void drawing1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_drawing1MouseWheelMoved
        drawing1.zoom -= evt.getScrollAmount() * evt.getWheelRotation();
        drawing1.repaint();
    }//GEN-LAST:event_drawing1MouseWheelMoved

    private void jButtonInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonInputMouseClicked
        elementToAdd = new Input();
        drawing1.separate = elementToAdd;
    }//GEN-LAST:event_jButtonInputMouseClicked

    private void jButtonNotMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNotMouseClicked
        elementToAdd = new NOT();
        drawing1.separate = elementToAdd;
    }//GEN-LAST:event_jButtonNotMouseClicked

    private void jButtonAndMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAndMouseClicked
        elementToAdd = new AND();
        drawing1.separate = elementToAdd;
    }//GEN-LAST:event_jButtonAndMouseClicked

    private void jButtonOrMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOrMouseClicked
        elementToAdd = new OR();
        drawing1.separate = elementToAdd;
    }//GEN-LAST:event_jButtonOrMouseClicked

    private void jButtonXorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonXorMouseClicked
        elementToAdd = new XOR();
        drawing1.separate = elementToAdd;
    }//GEN-LAST:event_jButtonXorMouseClicked

    private void jMenuItemColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemColorMouseClicked
        ColorSelector cs = new ColorSelector(this, true);
        cs.setBackground(drawing1.getBackground());
        cs.setBorder(drawing1.color);
        cs.setVisible(true);
        if (cs.selected) {
            Color background = cs.background;
            Color border = cs.border;
            drawing1.setBackground(background);
            drawing1.color = border;
            drawing1.repaint();
        }
    }//GEN-LAST:event_jMenuItemColorMouseClicked

    private void jMenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewActionPerformed
        mySchema = new Schema();
        mySchema.addInput();
        mySchema.addNOT();
        mySchema.addAND();
        mySchema.addNOT();
        mySchema.addOR();
        mySchema.connectElements(1, 2);
        mySchema.connectElements(2, 3);
      //mySchema.connectElements(1, 3);
        mySchema.connectElements(3, 4);
        mySchema.connectElements(1, 5);
        mySchema.connectElements(3, 5);
        mySchema.connectElements(4, 5);
        drawing1.setForDrawing(mySchema);
        drawing1.repaint();
    }//GEN-LAST:event_jMenuItemNewActionPerformed

    private void jSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderStateChanged
        if(!jSlider.getValueIsAdjusting()){
            int seconds = jSlider.getValue();
            if(seconds == 0){
                jButtonPlay.setEnabled(false);
                jButtonStop.setEnabled(false);
            } else {
                jButtonPlay.setEnabled(true);
                jButtonStop.setEnabled(true);
            }
            setInterval(seconds);
        }
    }//GEN-LAST:event_jSliderStateChanged

    private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayActionPerformed
        if (paintingThread == null || !paintingThread.isAlive()){
            paintingThread = new PaintingThread(drawing1, maxLevel(), seconds);
            paintingThread.start();
        } else {
            JOptionPane.showMessageDialog(this, "Thread is already running.");
        }
    }//GEN-LAST:event_jButtonPlayActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        if (paintingThread != null){
            paintingThread.interrupt();
            paintingThread = null;
        }
    }//GEN-LAST:event_jButtonStopActionPerformed

    private void jButtonNextStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextStepActionPerformed
        if (drawing1.level < maxLevel()){
            drawing1.level++;
            drawing1.repaint();
        }
    }//GEN-LAST:event_jButtonNextStepActionPerformed

    private void jButtonMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveActionPerformed
        if (movingThread == null || !movingThread.isAlive()){
            movingThread = new MovingThread(drawing1);
            movingThread.start();
        } else
            JOptionPane.showMessageDialog(this, "Thread is already running");
    }//GEN-LAST:event_jButtonMoveActionPerformed

    private void jButtonDontMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDontMoveActionPerformed
        if (movingThread != null && movingThread.isAlive()){
            movingThread.interrupt();
            movingThread = null;
        }
    }//GEN-LAST:event_jButtonDontMoveActionPerformed
            
    public void setInterval(int seconds){
        this.seconds = seconds;
    }
    
    public int maxLevel() {
        int max = 1;
        for (Element e : mySchema.getListOfElements()){
            max = Math.max(max, e.getLevel());
        }
        return max;
    }
    
        public Element getMaxInputsElement(){
        for (Element e: mySchema.getListOfElements()){
            if (e.getInputs().size()>maxInputs){
                maxInputs = e.getInputs().size();
                maxInputsElement = e;
            } 
        }
        return maxInputsElement;
    }
    
    public Element getElementByCoordinates(int x, int y) {
        for (Element e : mySchema.getListOfElements()) {
            if (x > e.getX() && x < e.getX() + drawing1.zoom && y > e.getY() && y < e.getY() + drawing1.zoom) {
                return e;
            }
        }
        return null;
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private lab6.Drawing drawing1;
    private javax.swing.JButton jButtonAnd;
    private javax.swing.JButton jButtonDontMove;
    private javax.swing.JButton jButtonInput;
    private javax.swing.JButton jButtonMove;
    private javax.swing.JButton jButtonNextStep;
    private javax.swing.JButton jButtonNot;
    private javax.swing.JButton jButtonOr;
    private javax.swing.JButton jButtonPlay;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JButton jButtonXor;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemShowOutput;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemColor;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemNew;
    private javax.swing.JMenuItem jMenuItemRead;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JSlider jSlider;
    private javax.swing.JToolBar jToolBarControl;
    private javax.swing.JToolBar jToolBarInputs;
    // End of variables declaration//GEN-END:variables
}
